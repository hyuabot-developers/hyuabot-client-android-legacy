type Query {
  shuttle: Shuttle!

  subway(stations: [String!]!, routes: [String!]!): [SubwayItem!]!

  bus(stopList: [String!]!, routes: [String!]!): [BusItem!]!

  readingRoom(roomName: String!, campusId: Int!, isActive: Boolean! = true): [ReadingRoomItem!]!

  cafeteria(campusId: Int!, cafeteriaIdList: [Int!]!): [CafeteriaItem!]!
}

type Shuttle {
  timetable(period: String!, weekday: String!, shuttleType: String!, startStop: String!, startTime: String!, endTime: String!): [ShuttleTimetableItem!]!
}

type ShuttleTimetableItem {
  period: String!

  weekday: String!

  shuttleType: String!

  shuttleTime: String!

  startStop: String!
}

type SubwayItem {
  stationName: String!

  routeName: String!

  timetable(heading: String!, weekday: String!, startTime: Time!, endTime: Time!): [SubwayTimetableItem!]!

  realtime(heading: String!): [SubwayRealtimeItem!]!
}

type SubwayTimetableItem {
  heading: String!

  weekday: String!

  terminalStation: String!

  departureTime: String!
}

"""
Time (isoformat)
"""
scalar Time

type SubwayRealtimeItem {
  heading: String!

  updateTime: String!

  trainNumber: String!

  lastTrain: String!

  terminalStation: String!

  currentStation: String!

  remainedTime: String!

  status: String!
}

type BusItem {
  stopName: String!

  routeName: String!

  stopId: Int!

  routeId: Int!

  startStop: String!

  terminalStop: String!

  timeFromStartStop: Int!

  timetable(weekday: String!): [BusTimetableItem!]!

  realtime: [BusRealtimeItem!]!
}

type BusTimetableItem {
  departureTime: Time!
}

type BusRealtimeItem {
  lowFloor: Boolean!

  remainedStop: Int!

  remainedTime: Int!

  remainedSeat: Int!
}

type ReadingRoomItem {
  roomName: String!

  campusId: Int!

  isActive: Boolean!

  isReservable: Boolean!

  totalSeat: Int!

  activeSeat: Int!

  occupiedSeat: Int!

  availableSeat: Int!
}

type CafeteriaItem {
  cafeteriaId: Int!

  cafeteriaName: String!

  menu(timeType: String!): [MenuItem!]!
}

type MenuItem {
  timeType: String!

  menu: String!

  price: String!
}

schema {
  query: Query
}
